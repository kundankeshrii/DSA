//Length of Linked List
https://www.geeksforgeeks.org/problems/count-nodes-of-linked-list/1
class Solution {
    public int getCount(Node head) {
    int cnt=0;
    Node temp=head;
    while(temp!=null){
        cnt++;
        temp=temp.next;
    }
        return cnt;
    }
}

//M-2 via Recursion 
class Solution {
    public int getCount(Node head) {
     if(head==null){
         return 0;
     }
     return 1+getCount(head.next);
    }
}

//Print Linked List
https://www.geeksforgeeks.org/problems/print-linked-list-elements/1
//M-1 via recursion
class Solution {
    public ArrayList<Integer> printList(Node head) {
        ArrayList<Integer>list=new ArrayList<>();
        if(head==null){
            return list;
        }
        list.add(head.data);
      list.addAll( printList(head.next));
        return list;
    }
}
//M-2 via loop
class Solution {
    public ArrayList<Integer> printList(Node head) {
        ArrayList<Integer>list=new ArrayList<>();
         Node temp=head;
         while(temp!=null){
             list.add(temp.data);
             temp=temp.next;
         }
        return list;
    }
}

//Search in Linked List
https://www.geeksforgeeks.org/problems/search-in-linked-list-1664434326/1
class Solution {
    public boolean searchKey(Node head, int key) {
        Node temp=head;
        while(temp!=null){
            if(temp.data==key){
                return true;
            }
            temp=temp.next;
        }
        return false;
        
    }
}


//Linked List Insertion At End
https://www.geeksforgeeks.org/problems/linked-list-insertion-1587115620/1

class Solution {
    public Node insertAtEnd(Node head, int x) {
        if(head==null){
            return new Node(x);
        }
          Node temp=head;
          while(temp.next!=null){
            temp=temp.next;
        }
        Node newNode=new Node(x);
        temp.next=newNode;
        return head;
    }
}

//Delete in a Singly Linked List
https://www.geeksforgeeks.org/problems/delete-a-node-in-single-linked-list/1

class Solution {
    Node deleteNode(Node head, int x) {
         if(head==null){
             return head;
         }
         if(x==1){
         return head.next;
         }
         int cnt=0;
         Node temp=head;
         Node prev=null;
         while(temp!=null){
             cnt++;
             if(cnt==x){
                 prev.next=prev.next.next;
             }
             prev=temp;
             temp=temp.next;
         }
         return head;
        
    }
}

//Node at a given index in linked list
https://www.geeksforgeeks.org/problems/node-at-a-given-index-in-linked-list/1

class Solution {
    public int GetNth(Node head, int index) {
        if(head==null){
            return -1;
        }
        Node temp=head;
        int cnt=0;
        while(temp!=null){
            cnt++;
            if(cnt==index){
                return temp.data;
            }
            temp=temp.next;
        }
        return -1;
        
    }
}

//Kth from End of Linked List
https://www.geeksforgeeks.org/problems/nth-node-from-end-of-linked-list/1

class Solution {
    int getKthFromLast(Node head, int k) {
        if(head==null){
            return -1;
        }
         Node temp=head;
         int cnt=-1;
         ArrayList<Integer>list=new ArrayList<>();
         while(temp!=null){
             cnt++;
             list.add(temp.data);
         temp=temp.next;
         }
         if(k<=cnt+1) return list.get(cnt-(k-1));
         return -1;
        
    }
