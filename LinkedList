//Length of Linked List
https://www.geeksforgeeks.org/problems/count-nodes-of-linked-list/1
class Solution {
    public int getCount(Node head) {
    int cnt=0;
    Node temp=head;
    while(temp!=null){
        cnt++;
        temp=temp.next;
    }
        return cnt;
    }
}

//M-2 via Recursion 
class Solution {
    public int getCount(Node head) {
     if(head==null){
         return 0;
     }
     return 1+getCount(head.next);
    }
}

//Print Linked List
https://www.geeksforgeeks.org/problems/print-linked-list-elements/1
//M-1 via recursion
class Solution {
    public ArrayList<Integer> printList(Node head) {
        ArrayList<Integer>list=new ArrayList<>();
        if(head==null){
            return list;
        }
        list.add(head.data);
      list.addAll( printList(head.next));
        return list;
    }
}
//M-2 via loop
class Solution {
    public ArrayList<Integer> printList(Node head) {
        ArrayList<Integer>list=new ArrayList<>();
         Node temp=head;
         while(temp!=null){
             list.add(temp.data);
             temp=temp.next;
         }
        return list;
    }
}

//Search in Linked List
https://www.geeksforgeeks.org/problems/search-in-linked-list-1664434326/1
class Solution {
    public boolean searchKey(Node head, int key) {
        Node temp=head;
        while(temp!=null){
            if(temp.data==key){
                return true;
            }
            temp=temp.next;
        }
        return false;
        
    }
}


//Linked List Insertion At End
https://www.geeksforgeeks.org/problems/linked-list-insertion-1587115620/1

class Solution {
    public Node insertAtEnd(Node head, int x) {
        if(head==null){
            return new Node(x);
        }
          Node temp=head;
          while(temp.next!=null){
            temp=temp.next;
        }
        Node newNode=new Node(x);
        temp.next=newNode;
        return head;
    }
}

//Delete in a Singly Linked List
https://www.geeksforgeeks.org/problems/delete-a-node-in-single-linked-list/1

class Solution {
    Node deleteNode(Node head, int x) {
         if(head==null){
             return head;
         }
         if(x==1){
         return head.next;
         }
         int cnt=0;
         Node temp=head;
         Node prev=null;
         while(temp!=null){
             cnt++;
             if(cnt==x){
                 prev.next=prev.next.next;
             }
             prev=temp;
             temp=temp.next;
         }
         return head;
        
    }
}

//Node at a given index in linked list
https://www.geeksforgeeks.org/problems/node-at-a-given-index-in-linked-list/1

class Solution {
    public int GetNth(Node head, int index) {
        if(head==null){
            return -1;
        }
        Node temp=head;
        int cnt=0;
        while(temp!=null){
            cnt++;
            if(cnt==index){
                return temp.data;
            }
            temp=temp.next;
        }
        return -1;
        
    }
}

//Kth from End of Linked List
https://www.geeksforgeeks.org/problems/nth-node-from-end-of-linked-list/1

class Solution {
    int getKthFromLast(Node head, int k) {
        if(head==null){
            return -1;
        }
         Node temp=head;
         int cnt=-1;
         ArrayList<Integer>list=new ArrayList<>();
         while(temp!=null){
             cnt++;
             list.add(temp.data);
         temp=temp.next;
         }
         if(k<=cnt+1) return list.get(cnt-(k-1));
         return -1;
        
    }

//Remove every k'th node
https://www.geeksforgeeks.org/problems/remove-every-kth-node/1

class Solution {
    
    Node deleteK(Node head, int k) {
         if(head==null){
             return head;
         }
         if(k==1){
             return head.next;
         }
         int cnt=0;
         Node prev=null;
         Node temp=head;
         while(temp!=null){
             cnt++;
             if(cnt%k==0){
                 prev.next=prev.next.next;
             }
             prev=temp;
             temp=temp.next;
         }
        return head;
    }
}

//Middle of a Linked List
https://www.geeksforgeeks.org/problems/finding-middle-element-in-a-linked-list/1

class Solution {
    int getMiddle(Node head) {
         int result=0;;
         Node temp=head;
        int cnt=0;
        while(temp!=null){
            cnt++;
            temp=temp.next;
        }
         int mid=0; temp=head;
        while(temp!=null){
            mid++;
            if(mid==cnt/2){
                result=temp.next.data;
            }
            temp=temp.next;
        }
    return result;
    }
}

//Frequency in a Linked List
https://www.geeksforgeeks.org/problems/occurence-of-an-integer-in-a-linked-list/1
class Solution {
    public static int count(Node head, int key) {
          Node temp=head;
          int cnt=0;
          while(temp!=null){
              if(temp.data==key){
                  cnt++;
              }
              temp=temp.next;
          }
         return cnt;
    }
}

//Reverse a linked list
https://www.geeksforgeeks.org/problems/reverse-a-linked-list/1
//this question has done with three methods 
class Solution {
    Node reverseList(Node head) {
        //using iteration
        
    //     if(head.next==null){
    //         return head;
    //     }
    //     Node temp=head;
    //     Node prev=null;
    //     Node next;
    //     while(temp!=null){
    //         next=temp.next;
    //         temp.next=prev;
    //         prev=temp;
    //         temp=next;
    //     }
    //   return prev; 
    // }
    
    //using recursion
    
//     if(head==null || head.next==null){
//         return head;
//     }
//     Node newHead=reverseList(head.next);
//     head.next.next=head;
//     head.next=null;
//     return newHead;
// }

//using stack
        // Stack<Node>st=new Stack<>();
        // Node temp=head;
        // while(temp!=null){
        //     st.push(temp);
        //     temp=temp.next;
        // }
        // Node newHead=st.pop();
        // Node curr=newHead;
        // while(!st.isEmpty()){
        //     Node node=st.pop();
        //     curr.next=node;
        //     curr=node;
        // }
        // curr.next=null;
        // return newHead;
        // }
}

//Delete in a Doubly Linked List
https://www.geeksforgeeks.org/problems/delete-node-in-doubly-linked-list/1
class Solution {
    public Node delPos(Node head, int x) {
        if(head==null){
            return null;
        }
         Node temp=head;
         int cnt=0;
         while(temp!=null){
             cnt++;
             if(cnt==x){
                 break;
             }
             temp=temp.next;
         }
         if (temp == null) return head; 
         Node prev=temp.prev;
         Node front=temp.next;
         if(prev==null && front==null){
             return null;
         }else if(prev==null){
            return deleteHead(head);
}       else if(front==null){
    return deleteTail(head);
} 
        prev.next=front;
        front.prev=prev;
        
        temp.next=null;
        temp.prev=null;
        return head;
    }
    private Node deleteHead(Node head){
        if(head==null || head.next==null){
            return null;
        }
        Node prev=head;
        head=head.next;
        head.prev=null;
        prev.next=null;
        return head;
        
    }
    private Node deleteTail(Node head){
        if(head==null || head.next==null){
            return null;
        }
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
        }
        Node prev=temp.prev;
        prev.next=null;
        temp.prev=null;
        return head;
    }
}

//Some standard Question
//Odd Even Linked List
https://leetcode.com/problems/odd-even-linked-list/description/
//it contains two solutions 
class Solution {
    public ListNode oddEvenList(ListNode head) {
        // //Data Replacement method 
        List<Integer>list=new ArrayList<>();
        if(head==null || head.next==null){
            return head;
        }
        ListNode temp=head;//for odd indices
        while(temp!=null && temp.next!=null){   
            list.add(temp.val);
            temp=temp.next.next;
        }
        if(temp!=null){ //edge case if any left 
            list.add(temp.val);
        }
        //for even indices
        temp=head.next;
        while(temp!=null && temp.next!=null){
            list.add(temp.val);
            temp=temp.next.next;
        }
        if(temp!=null) list.add(temp.val);
        //traverse all and replace the data 
        int i=0;temp=head;
        while(temp!=null){
            temp.val=list.get(i);
            i++;
            temp=temp.next;
        }
        return head;

        // if(head==null || head.next==null){
        //     return head;
        // }
        // ListNode odd=head;
        // ListNode even=head.next;
        // ListNode evenHead=head.next;
        // while(even!=null && even.next!=null){
        //     odd.next=odd.next.next;
        //     even.next=even.next.next;

        //     odd=odd.next;
        //     even=even.next;
        // }
        // odd.next=evenHead;
        // return head;
    }
}

// Remove Nth Node From End of List
https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode fast=head;
        ListNode slow=head;
        for(int i=0;i<n;i++) fast=fast.next; 
        if(fast==null) return head.next;
        while(fast.next!=null)
        {
            fast=fast.next;
            slow=slow.next;
        }
        //deleting the target node 
        slow.next=slow.next.next;
        return head;
        }
    }

//Delete the Middle Node of a Linked List
https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/description/
//M-1 :TC-O(2N)
 //     SC :- O(1)
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        int cnt=-1;
        int mid=0;
        if(head==null || head.next==null){
            return null;
        }
        ListNode temp=head;
        while(temp!=null){
            cnt++;
            temp=temp.next;
        } temp=head;
            if(cnt%2==0){
                while(temp!=null){
                    mid++;
                    if(mid==cnt/2){
                    temp.next=temp.next.next;
                        break;
                }
                temp=temp.next;
            }
            }
            else{
                while(temp!=null){
                    mid++;
                    if(mid==(cnt+1)/2){
                    temp.next=temp.next.next;
                        break;
                }
                temp=temp.next;
            }

        }
    return head;
    }
}
//M-2 TC-O(N),SC-O(1)
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head==null || head.next==null){
            return null;
        }
        ListNode slow=head;
        ListNode fast=head.next.next; //two step ahead w.r.t slow pointer 
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        slow.next=slow.next.next;
     return head;
    }
}
