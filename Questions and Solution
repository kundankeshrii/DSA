//Q11.Leetcode
//https://leetcode.com/problems/container-with-most-water/description/
//Using Two Pointer Approach
class Solution {
    public int maxArea(int[] height) {
        int i=0;
        int j=height.length-1;
        int maxWater=0;
        while(i<j){
            int width=j-i;
            int heightt=Math.min(height[i],height[j]);
            int area=width*heightt;
            maxWater=Math.max(maxWater,area);
            if(height[i]<height[j]){
                i++;
            }else{
                j--;
            }
        }
        return maxWater;
    }
}

//https://leetcode.com/problems/next-permutation/description/
//leetcode Q.31
//solved using Two pointer approach
class Solution {
         private void swap(int[] arr,int a,int b){
          int temp=arr[a];
          arr[a]=arr[b];
          arr[b]=temp;
     }
     private void reverse(int[] arr,int start,int end){
        
        while(start<end){
            swap(arr,start,end);
            start++;end--;
        }
     }
    public void nextPermutation(int[] nums) {
        int idx=-1;
        int n=nums.length;
        for(int i=n-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
                idx=i;
                break;
                                }
            }
            if(idx==-1){
                reverse(nums,0,n-1);
                System.out.println(Arrays.toString(nums));
                return;
            }
            for(int j=n-1;j>idx;j--){
                if(nums[j]>nums[idx]){
                    swap(nums,j,idx);
                    break;
                }
            }
            reverse(nums,idx+1,n-1);
            System.out.println(Arrays.toString(nums));
        }
    
}


//https://leetcode.com/problems/combination-sum/

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        return CS(candidates,candidates.length-1,target);
    }
    private List<List<Integer>> CS(int[] arr,int n,int target){
        List<List<Integer>> result=new ArrayList<>();
        
        if(target==0) {
            result.add(new ArrayList<>());
            return result;
        }
        if(target<0 || n<0 ) return result;
        //exclude
         
        List<List<Integer>> exclude= CS(arr,n-1,target);
        //include
         List<List<Integer>> include= CS(arr,n,target-arr[n]);
         for(List<Integer> list: include){
            list.add(0,arr[n]);
            result.add(list);
         }
         result.addAll(exclude);
         return result;

         }
    
}


//https://leetcode.com/problems/subsets/description/

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        return powerSet(nums,0,new ArrayList<>());
    }
   
    private List<List<Integer>> powerSet(int[] nums,int idx,List<Integer> curr ){
        if(idx==nums.length){
             List<List<Integer>> list=new ArrayList<>();
             list.add(new ArrayList<>(curr));
             return list;

        }//exclude
         List<List<Integer>> exclude=powerSet(nums,idx+1,curr);
         //include
         curr.add(nums[idx]);
         List<List<Integer>> include=powerSet(nums,idx+1,curr);
         curr.remove(curr.size()-1);

         //merge result
         exclude.addAll(include);
         return exclude;


    }

}


//https://leetcode.com/problems/combination-sum-ii/description/

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates); 
        return CS(candidates, candidates.length - 1, target);
    }

    private List<List<Integer>> CS(int[] arr, int idx, int target) {
        List<List<Integer>> result = new ArrayList<>();

        if (target == 0) {
            result.add(new ArrayList<>());  
            return result;
        }
        if (target < 0 || idx < 0) {
            return result;  
        }

        //Exclude 
        int newIdx = idx - 1;
        // skip  
        while (newIdx >= 0 && arr[newIdx] == arr[idx]) {
            newIdx--;
        }
        List<List<Integer>> exclude = CS(arr, newIdx, target);

        // Include 
        List<List<Integer>> include = CS(arr, idx - 1, target - arr[idx]);
        for (List<Integer> list : include) {
            list.add(0, arr[idx]);
            result.add(list);
        }

        result.addAll(exclude);
        return result;
    }
}
