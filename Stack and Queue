//https://www.geeksforgeeks.org/problems/sort-a-stack/1
class Solution {
     public void sortStack(Stack<Integer>st){
        if(st.isEmpty()) return;
        int element=st.pop();
        sortStack(st);
        insertRight(st,element);
    }
    private void insertRight(Stack<Integer> st,int element){
        if(st.isEmpty() || element>=st.peek()){
            st.push(element);
            return;
        }
            int top=st.pop();
            insertRight(st, element);
            st.push(top);
        }
}

https://leetcode.com/problems/implement-stack-using-queues/description/
//225. Implement Stack using Queues
class MyStack {
          Queue < Integer > queue ;
    public MyStack() {
           queue = new LinkedList < > ();
        }    
    public void push(int x) {
          queue.add(x);
        for (int i = 0; i < queue.size() - 1; i++) {
            queue.add(queue.remove());
    }
    
    }
    public int pop() {
        return queue.remove();
    }
    
    public int top() {
        return queue.peek();
    }
    
    public boolean empty() {
       return queue.isEmpty();
    }
}
