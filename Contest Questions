https://leetcode.com/contest/weekly-contest-468/problems/bitwise-or-of-even-numbers-in-an-array/
//Q1. Bitwise OR of Even Numbers in an Array
class Solution {
    public int evenNumberBitwiseORs(int[] nums) {
        int result=0;
        for(int i=0;i<nums.length;i++){
            if(((nums[i]) & (1 ))== 0){
                result=result|nums[i];
            }
        }
        return result;
    }
}

https://leetcode.com/contest/weekly-contest-468/problems/maximum-total-subarray-value-i/description/
//Q2. Maximum Total Subarray Value I
class Solution {
    public long maxTotalValue(int[] nums, int k) {
        long max=nums[0];
        long min=nums[0];
        long result=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>max){
                max=nums[i];
            }
            if((min>nums[i])){
                min=nums[i];
            }
        }
        result=(max-min)*k;   //better practise to type cast k also i.e (long)k
        return result;
    }
}


//Biweekly Contest 166
https://leetcode.com/contest/biweekly-contest-166/


//Weekly Contest Leetcode 
https://leetcode.com/contest/weekly-contest-470/problems/compute-alternating-sum/
//Q1. Compute Alternating Sum
class Solution {
    public int alternatingSum(int[] nums) {
        int sum=0;
        for(int i=0;i<nums.length;i++){
            if(i%2==0){
                sum+=nums[i];
            }else{
            sum-=nums[i];
            }
        }
        return sum;
    }
}
//Q2.Longest Subsequence With Non-Zero Bitwise XOR
https://leetcode.com/contest/weekly-contest-470/problems/longest-subsequence-with-non-zero-bitwise-xor/description/
class Solution {
    public int longestSubsequence(int[] nums) {
        int maxCnt=0;
        for(int i=0;i<nums.length;i++){
                maxCnt^=nums[i];
        }
        boolean allZero=true;
        for(int num:nums){
            if(num!=0){
            allZero=false;
            break;
            }
        }
            if(maxCnt!=0){
                return nums.length;
            }else if(!allZero){
              return  nums.length-1;
            }else return 0;
    }
}
//Q1. Equal Score Substrings
https://leetcode.com/contest/biweekly-contest-167/problems/equal-score-substrings/description/
class Solution {
    public boolean scoreBalance(String s) {
        double sum=0;
        List<Integer>list=new ArrayList<>();
        for(int i=0;i<s.length();i++){
            int num=s.charAt(i)-'a'+1;
            sum+=num;
            list.add(num);
        }
            int CurrSum=0;
            for(int i=0;i<list.size();i++){
                CurrSum+=list.get(i);
                if(CurrSum==sum/2){
                    return true;
                }
            }
        return false;
        }
}
//Longest Fibonacci Subarray
https://leetcode.com/contest/biweekly-contest-167/problems/longest-fibonacci-subarray/description/
class Solution {
    public int longestSubarray(int[] nums) {
        int Mcnt=2;
        int i=0;int j=i+1;int k=i+2;
        if(nums.length==1 || nums.length==2){
            return Mcnt;
        }
            int cnt=2;
         while(k<nums.length){
             if(nums[i]+nums[j]==nums[k]){
                 cnt++;
                 if(Mcnt<cnt){
                 Mcnt=cnt;
             }
             }else{
                 cnt=2;
             }
             i++;j++;k++;
        }
        return Mcnt;
    }
}
